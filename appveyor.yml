# Appveyor config yml to execute desktop automation tests using spectron.
version: 1.0.{build}-{branch}

image:
  - Visual Studio 2017

platform:
  - x64

environment:
  NODEJS_VERSION: $env:NODEJS_VERSION
  APPVEYOR_RDP_ENABLED: $env:APPVEYOR_RDP_ENABLED
  APPVEYOR_RDP_PASSWORD: $env:APPVEYOR_RDP_PASSWORD
  CIRCLE_TOKEN: $env:CIRCLE_TOKEN
  REPO_DIR: $env:REPO_DIR
  USER_DESKTOP_DIR: $env:USER_DESKTOP_DIR
  TEST_SUITE: $env:TEST_SUITE
  ZIMBRA_PROXY_URL: $env:ZIMBRA_PROXY_URL
  SERVER_ADMIN_USERNAME: $env:SERVER_ADMIN_USERNAME
  SERVER_ADMIN_PASSWORD: $env:SERVER_ADMIN_PASSWORD
  HTML_REPORT_PATH: $env:HTML_REPORT_PATH
  TEXT_REPORT_PATH: $env:TEXT_REPORT_PATH

branches:
  only:
    - master

init:
  - ps: |      
      # Enable remote desktop connection
      if ($env:APPVEYOR_RDP_ENABLED -eq 'TRUE') {
        Add-AppveyorMessage "Start remote desktop connection"
        iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      }
      
before_build:
  - ps: |
      # Checkout code
      Add-AppveyorMessage "Check out project code"
      Install-Product node $NODEJS_VERSION
      
      # Install certificates
      cd $env:REPO_DIR
      powershell.exe -noexit "& '.\tests\spectron\data\certificates\install-certificates.ps1'"

install:
  - ps: |
      # Download and install desktop build
      $DESKTOP_BUILD_URL = "https://52616-126518968-gh.circle-artifacts.com/0/electron/Zimbra_X_Desktop_0.0.1_e8e01cc_20190426094759.exe?circle-token=" + $env:CIRCLE_TOKEN
      Add-AppveyorMessage "Download and install desktop build"
      cd $env:USER_DESKTOP_DIR
      New-Item -ItemType SymbolicLink -Name $env:APPVEYOR_PROJECT_NAME -Target $env:REPO_DIR | out-null
      Remove-Item .\Tools , ".\Visual Studio 2015.lnk" , ".\Visual Studio 2017.lnk" -Recurse -Force

      # Get desktop filename from build URL
      $DESKTOP_BUILD_URL_CONTENT = $DESKTOP_BUILD_URL -split "/"
      $DESKTOP_BUILD_FILENAME = $DESKTOP_BUILD_URL_CONTENT[5] -split "\?"
      Start-FileDownload $DESKTOP_BUILD_URL
      Start-Process -FilePath $DESKTOP_BUILD_FILENAME[0] /S -Wait -WindowStyle Maximized -PassThru

build_script:
  - ps: |
      # Build code
      Add-AppveyorMessage "Build code and install pre-requisites"
      cd $env:REPO_DIR
      npm install
      npm install -g --save-dev mocha spectron mochawesome

before_test:
  - ps: |
      # Set machine screen resolution
      iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/set-screenresolution.ps1'))
      Set-ScreenResolution 1920 1080
      
test_script:
  - ps: |
      # Run desktop tests
      Add-AppveyorMessage "Running desktop automation tests, please wait..."
      New-Item -ItemType Directory -Path $env:REPO_DIR\$env:HTML_REPORT_PATH -Force  | out-null
      Add-AppveyorTest -Name Desktop -Framework Mocha -Filename $env:TEXT_REPORT_PATH -Outcome Running

      # Create environment to debug tests in remote machine
      Add-Content environment.txt "
      Set-Item Env:ZIMBRA_PROXY_URL $env:ZIMBRA_PROXY_URL ;
      Set-Item Env:SERVER_ADMIN_USERNAME $env:SERVER_ADMIN_USERNAME ;
      Set-Item Env:SERVER_ADMIN_PASSWORD $env:SERVER_ADMIN_PASSWORD ;
      Set-Item Env:TEST_SUITE $env:TEST_SUITE ;
      Set-Item Env:HTML_REPORT_PATH $env:HTML_REPORT_PATH ;
      Set-Item Env:TEXT_REPORT_PATH $env:TEXT_REPORT_PATH ;
      mocha --recursive tests\spectron\tests -f $env:TEST_SUITE --retries 1 --no-deprecation --reporter mochawesome --reporter-options reportDir=$env:HTML_REPORT_PATH > $env:TEXT_REPORT_PATH"

      # Configure desktop client
      Set-Item Env:SERVER_ADMIN_USERNAME $env:SERVER_ADMIN_USERNAME ;
      Set-Item Env:SERVER_ADMIN_PASSWORD $env:SERVER_ADMIN_PASSWORD ;
      Set-Item Env:TEST_SUITE $env:TEST_SUITE ;
      mocha tests/spectron/conf/configure.js -f Configure

      # Run desktop client tests
      Set-Item Env:ZIMBRA_PROXY_URL $env:ZIMBRA_PROXY_URL ;
      Set-Item Env:SERVER_ADMIN_USERNAME $env:SERVER_ADMIN_USERNAME ;
      Set-Item Env:SERVER_ADMIN_PASSWORD $env:SERVER_ADMIN_PASSWORD ;
      Set-Item Env:TEST_SUITE $env:TEST_SUITE ;
      Set-Item Env:HTML_REPORT_PATH $env:HTML_REPORT_PATH ;
      Set-Item Env:TEXT_REPORT_PATH $env:TEXT_REPORT_PATH ;
      mocha --recursive tests\spectron\tests -f $env:TEST_SUITE --retries 1 --no-deprecation --reporter mochawesome --reporter-options reportDir=$env:HTML_REPORT_PATH > $env:TEXT_REPORT_PATH

artifacts:
  # Publish artifact zip
  - path: test-reports\spectron
    name: ${APPVEYOR_BUILD_VERSION}.zip

on_finish:
  - ps: |
      # Publish report file
      if (Test-Path $env:TEXT_REPORT_PATH) {
        cat $env:TEXT_REPORT_PATH
        Push-AppveyorArtifact $env:TEXT_REPORT_PATH -FileName ${APPVEYOR_BUILD_VERSION}.txt
      } else {
        Add-AppveyorMessage "Couldn't find test report file"
      }

  - ps: |
      # Push job status
      $TEXT_REPORT_FILE_CONTENT = Get-Content $env:TEXT_REPORT_PATH
      $IS_TEST_FAILED = $TEXT_REPORT_FILE_CONTENT | %{$_ -match "failing"}

      if ($IS_TEST_FAILED -contains $true) {
        Add-AppveyorMessage "Job failed"
        Update-AppveyorTest -Name Desktop -Framework Mocha -Filename $env:TEXT_REPORT_PATH -Outcome Failed
      } else {
        Add-AppveyorMessage "Job passed"
        Update-AppveyorTest -Name Desktop -Framework Mocha -Filename $env:TEXT_REPORT_PATH -Outcome Passed
      }

  - ps: |
      # Stop remote desktop connection
      if ($env:APPVEYOR_RDP_ENABLED -eq 'TRUE') {
        Add-AppveyorMessage "Stop remote desktop connection"
        $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      }
