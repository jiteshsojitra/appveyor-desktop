version: 1.0.{build}-{branch}

image:
  - Visual Studio 2017

platform:
  - x64

environment:
  NODEJS_VERSION: $env:NODEJS_VERSION
  APPVEYOR_RDP_ENABLED: $env:APPVEYOR_RDP_ENABLED
  APPVEYOR_RDP_PASSWORD: $env:APPVEYOR_RDP_PASSWORD
  BUILD_NOTIFICATION_EMAIL: $env:BUILD_NOTIFICATION_EMAIL
  REPO_DIR: $env:REPO_DIR
  DESKTOP_DIR: $env:DESKTOP_DIR
  TEST_SUITE: $env:TEST_SUITE
  ZIMBRA_PROXY_URL: $env:ZIMBRA_PROXY_URL
  SERVER_ADMIN_USERNAME: $env:SERVER_ADMIN_USERNAME
  SERVER_ADMIN_PASSWORD: $env:SERVER_ADMIN_PASSWORD
  HTML_REPORT_PATH: $env:HTML_REPORT_PATH
  TEXT_REPORT_PATH: $env:TEXT_REPORT_PATH
  DESKTOP_BUILD_URL: https://52616-126518968-gh.circle-artifacts.com/0/electron/Zimbra_X_Desktop_0.0.1_e8e01cc_20190426094759.exe?circle-token=15147e283947071011540e2f26a74bcd7b002c6f

branches:
  only:
    - master

init:
  - ps: >-
      if ($env:APPVEYOR_RDP_ENABLED -eq 'TRUE') { 
        powershell -Command "Add-AppveyorMessage 'Initiating remote desktop connection...'"
        powershell -Command "iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))"
      }

before_build:
  - ps: Add-AppveyorMessage "Checking out code and installing nodejs"
  - ps: Install-Product node $NODEJS_VERSION

install:
  - ps: Add-AppveyorMessage "Downloading and installing desktop build"
  - ps: cd $env:DESKTOP_DIR
  - ps: New-Item -ItemType SymbolicLink -Name $APPVEYOR_PROJECT_NAME -Target $env:REPO_DIR | out-null
  - ps: Remove-Item .\Tools , '.\Visual Studio 2015.lnk' , '.\Visual Studio 2017.lnk' -Recurse -Force
  - ps: $GET_DESKTOP_BUILD_FILE = $env:DESKTOP_BUILD_URL -split '/'
  - ps: $DESKTOP_BUILD_FILENAME = $GET_DESKTOP_BUILD_FILE[5] -split '\?'
  - ps: Start-FileDownload $env:DESKTOP_BUILD_URL
  - ps: Start-Process -FilePath $DESKTOP_BUILD_FILENAME[0] /S -Wait -WindowStyle Maximized -PassThru

build_script:
  - ps: Add-AppveyorMessage "Building project code and installing pre-requisites"
  - ps: cd $env:REPO_DIR
  - ps: npm install
  - ps: npm install -g --save-dev mocha spectron mochawesome

before_test:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/set-screenresolution.ps1'))
  - ps: Set-ScreenResolution 1920 1080
 
test_script:
  - ps: Add-AppveyorMessage "Configuring test suite"
  - ps: New-Item -ItemType Directory -Path $env:REPO_DIR\$env:HTML_REPORT_PATH -Force  | out-null
  - ps: Add-Content environment.txt "Set-Item Env:ZIMBRA_PROXY_URL $env:ZIMBRA_PROXY_URL ; Set-Item Env:SERVER_ADMIN_USERNAME $env:SERVER_ADMIN_USERNAME ; Set-Item Env:SERVER_ADMIN_PASSWORD $env:SERVER_ADMIN_PASSWORD ; Set-Item Env:TEST_SUITE $env:TEST_SUITE ; Set-Item Env:HTML_REPORT_PATH $env:HTML_REPORT_PATH ; Set-Item Env:TEXT_REPORT_PATH $env:TEXT_REPORT_PATH ; mocha --recursive tests\spectron\tests\mail -f $env:TEST_SUITE --retries 2 --no-deprecation --reporter mochawesome --reporter-options reportDir=$env:HTML_REPORT_PATH > $env:TEXT_REPORT_PATH"
  - ps: Set-Item Env:SERVER_ADMIN_USERNAME $env:SERVER_ADMIN_USERNAME ; Set-Item Env:SERVER_ADMIN_PASSWORD $env:SERVER_ADMIN_PASSWORD ; Set-Item Env:TEST_SUITE $env:TEST_SUITE ; mocha tests/spectron/conf/configure.js -f Configure

  - ps: Add-AppveyorMessage "Running desktop automation tests, please wait..."
  - ps: Set-Item Env:ZIMBRA_PROXY_URL $env:ZIMBRA_PROXY_URL ; Set-Item Env:SERVER_ADMIN_USERNAME $env:SERVER_ADMIN_USERNAME ; Set-Item Env:SERVER_ADMIN_PASSWORD $env:SERVER_ADMIN_PASSWORD ; Set-Item Env:TEST_SUITE $env:TEST_SUITE ; Set-Item Env:HTML_REPORT_PATH $env:HTML_REPORT_PATH ; Set-Item Env:TEXT_REPORT_PATH $env:TEXT_REPORT_PATH ; mocha --recursive tests\spectron\tests\mail -f $env:TEST_SUITE --retries 2 --no-deprecation --reporter mochawesome --reporter-options reportDir=$env:HTML_REPORT_PATH > $env:TEXT_REPORT_PATH

artifacts:
  - path: test-reports\spectron
    name: ${APPVEYOR_BUILD_VERSION}

on_finish:
  - ps: >-
      if (Test-Path $env:TEXT_REPORT_PATH) {
        powershell -Command "cat $env:TEXT_REPORT_PATH"
      } else {
        powershell -Command "Add-AppveyorMessage 'Couldn't find test report file'"
      }
      
  - ps: >-
      $reportFile = Get-Content $env:TEXT_REPORT_PATH
      $isPassingPresent = $reportFile | %{$_ -match "passing"}
      $isFailingPresent = $reportFile | %{$_ -match "failing"}

      if ($isFailingPresent -contains $true) {
        powershell -Command "Job failed"
        powershell -Command "Add-AppveyorTest -Name Desktop -Framework Mocha -Filename $env:TEXT_REPORT_PATH -Outcome Failed"
      } else {
        powershell -Command "Job passed"
        powershell -Command "Add-AppveyorTest -Name Desktop -Framework Mocha -Filename $env:TEXT_REPORT_PATH -Outcome Passed"
      }
  
  - ps: >-
      if ($env:APPVEYOR_RDP_ENABLED -eq 'TRUE') { 
        powershell -Command "$blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))"
      }
