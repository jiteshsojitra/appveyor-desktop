import { h, Component } from 'preact';
import { Text, withText } from 'preact-i18n';
import get from 'lodash/get';
import { Button } from '@zimbra/blocks';
import PasswordInput from '../password-input';
import AnimatedButton from '../AnimatedButton';
import { graphql } from 'react-apollo';
import ChangePasswordMutation from '../../graphql/queries/change-password.graphql';
import linkState from 'linkstate';
import style from './style';

@withText('loginScreen.resetPass.passwordNotMatching')
@graphql(ChangePasswordMutation, {
	props: ({ mutate }) => ({
		changePassword: variables => mutate({ variables })
	})
})
export default class ChangePasswordForm extends Component {
	state = {
		username: this.props.username,
		password: this.props.password
	};

	shakeContinueButton = () => {
		this.setState({
			shake: true,
			loading: false
		});
	};

	afterContinueShake = () => {
		this.setState({
			shake: false
		});
	};

	submit = e => {
		this.setState({ loading: true });

		const { onError, onLogin, login, passwordNotMatching } = this.props,
			{ username, loginNewPassword, loginConfirmNewPassword } = this.state;

		if (loginNewPassword !== loginConfirmNewPassword) {
			onError && onError(passwordNotMatching);

			this.shakeContinueButton();
			return;
		}

		onError && onError('');

		this.props
			.changePassword(this.state)
			.then(() => login({ username, password: loginConfirmNewPassword }))
			.then(() => {
				onLogin();
			})
			.catch(err => {
				this.shakeContinueButton();

				// Get error code and corresponding count (if returned)
				const errorObj = get(err, 'graphQLErrors.0.originalError.faults.0.Detail.Error');

				if (errorObj) {
					// Handle errors generated by server side code
					let errorCode = errorObj && errorObj.Code;
					const errorMetadata = errorObj && get(errorObj, 'a.0');

					// Different error for change password screen
					if (errorCode === 'account.AUTH_FAILED') {
						errorCode = 'account.AUTH_FAILED_changePassword';
					}

					onError &&
						onError(
							<Text
								id={`faults.${errorCode}${errorMetadata ? `.${errorMetadata.n}` : ''}`}
								fields={{
									count: errorMetadata && errorMetadata._content
								}}
							/>
						);
				} else {
					onError && onError(<Text id={'error.genericInvalidRequest'} />);
				}
			});

		e.preventDefault();
	};

	componentWillReceiveProps({ username, password }) {
		if (username && this.props.username !== username) {
			this.setState({ username });
		}
		if (password && this.props.password !== password) {
			this.setState({ password });
		}
	}

	render(
		{ a11yId, onClose, ...props },
		{ password, loginNewPassword, loginConfirmNewPassword, loading, shake }
	) {
		const newPassInputId = 'loginNewPassword',
			confirmPassInputId = 'loginConfirmNewPassword',
			currentPassInputId = 'loginCurrentPassword';

		return (
			<form {...props} onSubmit={this.submit} action="javascript:" method="POST">
				<div>
					<label for={currentPassInputId}>
						<Text id="loginScreen.labels.currentPass" />
					</label>
					<PasswordInput
						autofocus
						autocomplete="new-password"
						name={currentPassInputId}
						value={password}
						onInput={linkState(this, 'password')}
						disabled={loading}
					/>
				</div>

				<label for={newPassInputId}>
					<Text id="loginScreen.labels.newPass" />
				</label>
				<PasswordInput
					autocomplete="new-password"
					name={newPassInputId}
					value={loginNewPassword}
					onInput={linkState(this, 'loginNewPassword')}
					disabled={loading}
				/>

				<label for={confirmPassInputId}>
					<Text id="loginScreen.labels.confirmPass" />
				</label>
				<PasswordInput
					autocomplete="new-password"
					name={confirmPassInputId}
					value={loginConfirmNewPassword}
					onInput={linkState(this, 'loginConfirmNewPassword')}
					disabled={loading}
				/>

				<div class={style.buttonsContainer}>
					<AnimatedButton
						class={style.continue}
						disabled={!password || !loginNewPassword || !loginConfirmNewPassword || loading}
						shake={shake}
						loading={loading}
						type="submit"
						styleType="primary"
						brand="primary"
						title={<Text id="buttons.continue" />}
						afterShake={this.afterContinueShake}
					/>

					{onClose && (
						<Button onClick={onClose}>
							<Text id="buttons.cancel" />
						</Button>
					)}
				</div>
			</form>
		);
	}
}
