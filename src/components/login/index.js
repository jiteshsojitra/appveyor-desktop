import { h, Component } from 'preact';
import { Text } from 'preact-i18n';
import get from 'lodash/get';
import { withAriaId } from '@zimbra/a11y';
import { configure } from '../../config';
import PasswordInput from '../password-input';
import AnimatedButton from '../AnimatedButton';
import { Button } from '@zimbra/blocks';
import TextInput from '../text-input';
import ClientLogo from '../client-logo';
import ChangePasswordForm from './change-password-form';
import ResetPasswordForm from './reset-password-form';
import withLogin from '../../graphql-decorators/login';
import linkState from 'linkstate';
import jwtStorage from '../../utils/jwt';
import cx from 'classnames';
import style from './style';
import ForgotPassword from './forgot-password';

@configure('clientName,useJwt,disableForgotPassword')
@withAriaId('login-form')
@withLogin()
export default class Login extends Component {
	state = {
		validity: {
			username: true,
			password: true
		},
		username: this.props.username,
		showChangePassword: this.props.showChangePassword
	};

	handleError = error => {
		this.setState({ error });
	};

	shakeLoginButton = () => {
		this.setState({
			loading: false,
			shake: true
		});
	};

	afterLoginShake = () => {
		this.setState({ shake: false });
	};

	setForgotPassword = () => {
		this.setState({ forgotPasswordFlow: true });
	};

	unsetForgotPassword = () => {
		this.setState({ forgotPasswordFlow: false });
	};

	forgotPasswordChange = ({ username }) => {
		this.setState({
			forgotPasswordFlow: false,
			showResetPassword: true,
			username
		});
	};

	submit = () => {
		const { login, onLogin, useJwt } = this.props,
			{ username, password } = this.state;
		this.setState({ error: '', loading: true });

		const validity = {
			username: username && username.length > 2,
			password: password && password.length > 2
		};

		if (!validity.username || !validity.password) {
			this.shakeLoginButton();
			this.setState({
				loading: false,
				validity
			});
			return;
		}

		login({ username, password, ...(useJwt && { tokenType: 'JWT' }) })
			.then(res => {
				if (useJwt) {
					const jwtToken = get(res, 'data.login.authToken.0._content');
					jwtStorage.set(jwtToken);
					this.context.zimbraBatchClient.setJwtToken(jwtToken);
					this.context.zimbra.setJwtToken(jwtToken);
				}
				return onLogin();
			})
			.catch(err => {
				this.shakeLoginButton();

				console.error(err);

				// Get error code and corresponding count (if returned)
				const errorObj = get(err, 'graphQLErrors.0.originalError.faults.0.Detail.Error');
				if (errorObj) {
					// Handle errors generated by server side code
					const errorCode = errorObj && errorObj.Code;
					const errorMetadata = errorObj && get(errorObj, 'a.0');

					this.setState({
						error: (
							<Text
								id={`faults.${errorCode}${errorMetadata ? `.${errorMetadata.n}` : ''}`}
								fields={{
									count: errorMetadata && errorMetadata._content
								}}
							/>
						),
						showChangePassword: errorCode === 'account.CHANGE_PASSWORD',
						loading: false
					});
				} else {
					this.setState({
						error: <Text id={'error.genericInvalidRequest'} />,
						loading: false
					});
				}
			});
		return false;
	};

	componentWillReceiveProps() {
		const { username, showChangePassword } = this.props;

		this.setState({
			...(username && username !== this.state.username && { username }),
			...(showChangePassword &&
				showChangePassword !== this.state.showChangePassword && { showChangePassword })
		});
	}

	render(
		{
			a11yId,
			clientName,
			login,
			onLogin,
			showChangePassword: changePasswordFlow,
			onClose,
			disableForgotPassword
		},
		{
			showChangePassword,
			showResetPassword,
			forgotPasswordFlow,
			error,
			loading,
			username,
			password,
			validity,
			shake
		}
	) {
		const emailInputId = `${a11yId}-email`;
		const passInputId = `${a11yId}-password`;

		return (
			<div class={!changePasswordFlow && style.container}>
				<div class={style.login}>
					<ClientLogo isLoginPage class={style.logo} />

					<h1>
						{showChangePassword || showResetPassword ? (
							changePasswordFlow ? (
								<Text id="loginScreen.resetPass.headerChangePassword" />
							) : (
								<Text id="loginScreen.resetPass.header" />
							)
						) : forgotPasswordFlow ? (
							<Text id="loginScreen.forgotPass.header" />
						) : (
							<Text id="loginScreen.header.title" />
						)}
					</h1>

					{!error && !showChangePassword && !showResetPassword && !forgotPasswordFlow && (
						<p>
							<Text id="loginScreen.header.tagline" fields={{ name: clientName }} />
						</p>
					)}

					<div class={cx(style.error, error && style.showing)}>
						<div class={style.inner}>{error}</div>
					</div>
					{showResetPassword ? (
						<ResetPasswordForm
							username={username}
							password={password}
							class={style.form}
							login={login}
							onLogin={onLogin}
							onError={this.handleError}
						/>
					) : showChangePassword ? (
						<ChangePasswordForm
							username={username}
							password={password}
							class={style.form}
							login={login}
							onLogin={onLogin}
							onError={this.handleError}
							onClose={onClose}
						/>
					) : forgotPasswordFlow ? (
						<ForgotPassword
							a11yId={a11yId}
							style={style}
							onCancel={this.unsetForgotPassword}
							onCodeSubmit={this.forgotPasswordChange}
						/>
					) : (
						<form onSubmit={this.submit} novalidate action="javascript:" method="POST">
							<div class={style.form}>
								<label for={emailInputId} class={cx(!validity.username && style.invalid)}>
									<Text id="loginScreen.labels.email" />
								</label>
								<TextInput
									autofocus
									autocomplete="username email"
									autocorrect="off"
									autocapitalize="off"
									spellcheck="false"
									type="email"
									disabled={loading}
									id={emailInputId}
									class={cx(!validity.username && style.invalid)}
									value={username}
									onAutoComplete={linkState(this, 'username')}
									onInput={linkState(this, 'username')}
								/>

								<label for={passInputId} class={cx(!validity.password && style.invalid)}>
									<Text id="loginScreen.labels.pass" />
								</label>
								<PasswordInput
									disabled={loading}
									autocomplete="current-password"
									id={passInputId}
									class={cx(!validity.password && style.invalid)}
									value={password}
									onAutoComplete={linkState(this, 'password')}
									onInput={linkState(this, 'password')}
								/>

								<div class={style.buttons}>
									<AnimatedButton
										loading={loading}
										disabled={loading}
										shake={shake}
										styleType="primary"
										brand="primary"
										type="submit"
										title={<Text id="loginScreen.header.title" />}
										afterShake={this.afterLoginShake}
									/>
									{!disableForgotPassword && (
										<Button onClick={this.setForgotPassword} styleType="text">
											<Text id="loginScreen.forgotPass.forgotPassword" />
										</Button>
									)}
								</div>
							</div>
						</form>
					)}
				</div>
				{!changePasswordFlow && (
					<footer class={style.footer}>
						{/*
						Unfinished - Will be finished in another Login ticket
						<h6><Text id="loginScreen.switchToBasic" /></h6>
						<ol>
							<li>
								<Text id="loginScreen.privacyPolicy" />
							</li>
							<li>
								<Text id="loginScreen.acceptableUsePolicy" />
							</li>
							<li>
								<Text id="loginScreen.contact" />
							</li>
						</ol>
						*/}
						<small>
							<Text id="loginScreen.copyright" />
						</small>
					</footer>
				)}
			</div>
		);
	}
}
